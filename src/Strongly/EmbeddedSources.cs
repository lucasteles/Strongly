using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;

namespace Strongly;

static class EmbeddedSources
{
    static readonly Assembly ThisAssembly = typeof(EmbeddedSources).Assembly;
    const string TemplateNamespace = "Strongly.Templates.";

    public const string ToStringKey = "[TO_STRING]";
    public const string DefaultToString = "Value[?].ToString()";

    public const string CtorKey = "[CTOR_VALUE]";
    public const string DefaultCtor = "Value = value;";

    internal static readonly string StronglyAttributeSource =
        LoadTemplateForEmitting("StronglyAttribute");

    internal static readonly string StronglyDefaultsAttributeSource =
        LoadTemplateForEmitting("StronglyDefaultsAttribute");

    internal static readonly string StronglyBackingTypeSource =
        LoadTemplateForEmitting("StronglyType");

    internal static readonly string StronglyConverterSource =
        LoadTemplateForEmitting("StronglyConverter");

    internal static readonly string StronglyImplementationsSource =
        LoadTemplateForEmitting("StronglyImplementations");

    static readonly string AutoGeneratedHeader =
        LoadEmbeddedResource("AutoGeneratedHeader");

    internal static readonly string BaseTypeDef = LoadEmbeddedResource("Base.Base_Type");
    internal static readonly string ImplicitFrom = LoadEmbeddedResource("Base.Implicit_From");
    internal static readonly string ImplicitTo = LoadEmbeddedResource("Base.Implicit_To");
    internal static readonly string ExplicitFrom = LoadEmbeddedResource("Base.Explicit_From");
    internal static readonly string ExplicitTo = LoadEmbeddedResource("Base.Explicit_To");


    internal static readonly string MathConst = LoadEmbeddedResource("Base.Math_Const");
    internal static readonly string MathAddition = LoadEmbeddedResource("Base.Math_Addition");
    internal static readonly string MathSubtraction = LoadEmbeddedResource("Base.Math_Subtraction");
    internal static readonly string MathDivision = LoadEmbeddedResource("Base.Math_Division");
    internal static readonly string MathNegation = LoadEmbeddedResource("Base.Math_Negation");
    internal static readonly string MathCompare = LoadEmbeddedResource("Base.Math_Compare");

    internal static readonly string MathMultiplication =
        LoadEmbeddedResource("Base.Math_Multiplication");

    internal static readonly string DefaultEfValueConverter =
        LoadEmbeddedResource("Base.EfValueConverter");

    internal static readonly string DefaultIComparable =
        LoadEmbeddedResource("Base.IComparable");

    internal static readonly ResourceCollection GuidResources = new(
        typeof(Guid).FullName,
        AutoGeneratedHeader,
        LoadEmbeddedResource("Guid.Guid_Base"),
        LoadEmbeddedResource("Guid.Guid_NewtonsoftJsonConverter"),
        LoadEmbeddedResource("Guid.Guid_SystemTextJsonConverter"),
        LoadEmbeddedResource("Guid.Guid_TypeConverter"),
        DefaultEfValueConverter,
        LoadEmbeddedResource("Guid.Guid_DapperTypeHandler"),
        DefaultIComparable,
        LoadEmbeddedResource("Guid.Guid_SwaggerSchemaFilter"),
        LoadEmbeddedResource("Guid.Guid_Parsable")
    )
    {
        Customizations =
        {
            ["NEW_DEFAULT"] = LoadEmbeddedResource("Guid.New.Guid_New"),
            ["NEW_SEQUENTIAL"] = LoadEmbeddedResource("Guid.New.Guid_New_Sequential"),
            ["NEW_COMB"] = LoadEmbeddedResource("Guid.New.Guid_Comb_New"),
        },
    };

    internal static readonly ResourceCollection IntResources = new(
        "int",
        AutoGeneratedHeader,
        LoadEmbeddedResource("Int.Int_Base"),
        LoadEmbeddedResource("Int.Int_NewtonsoftJsonConverter"),
        LoadEmbeddedResource("Int.Int_SystemTextJsonConverter"),
        LoadEmbeddedResource("Int.Int_TypeConverter"),
        DefaultEfValueConverter,
        LoadEmbeddedResource("Int.Int_DapperTypeHandler"),
        DefaultIComparable,
        LoadEmbeddedResource("Int.Int_SwaggerSchemaFilter"),
        LoadEmbeddedResource("Int.Int_Parsable")
    )
    {
        IsNumeric = true,
    };

    internal static readonly ResourceCollection LongResources = new(
        "long",
        AutoGeneratedHeader,
        LoadEmbeddedResource("Long.Long_Base"),
        LoadEmbeddedResource("Long.Long_NewtonsoftJsonConverter"),
        LoadEmbeddedResource("Long.Long_SystemTextJsonConverter"),
        LoadEmbeddedResource("Long.Long_TypeConverter"),
        DefaultEfValueConverter,
        LoadEmbeddedResource("Long.Long_DapperTypeHandler"),
        DefaultIComparable,
        LoadEmbeddedResource("Long.Long_SwaggerSchemaFilter"),
        LoadEmbeddedResource("Long.Long_Parsable")
    )
    {
        IsNumeric = true,
    };

    internal static readonly ResourceCollection BigIntegerResources = new(
        "System.Numerics.BigInteger",
        AutoGeneratedHeader,
        LoadEmbeddedResource("BigInteger.BigInteger_Base"),
        LoadEmbeddedResource("BigInteger.BigInteger_NewtonsoftJsonConverter"),
        LoadEmbeddedResource("BigInteger.BigInteger_SystemTextJsonConverter"),
        LoadEmbeddedResource("BigInteger.BigInteger_TypeConverter"),
        LoadEmbeddedResource("BigInteger.BigInteger_EfValueConverter"),
        LoadEmbeddedResource("BigInteger.BigInteger_DapperTypeHandler"),
        DefaultIComparable,
        LoadEmbeddedResource("BigInteger.BigInteger_SwaggerSchemaFilter"),
        LoadEmbeddedResource("BigInteger.BigInteger_Parsable")
    )
    {
        IsNumeric = true,
        Customizations =
        {
            [ToStringKey] = "Value.ToString(System.Globalization.NumberFormatInfo.InvariantInfo)",
        },
    };

    internal static readonly ResourceCollection DecimalResources = new(
        "decimal",
        AutoGeneratedHeader,
        LoadEmbeddedResource("Decimal.Decimal_Base"),
        LoadEmbeddedResource("Decimal.Decimal_NewtonsoftJsonConverter"),
        LoadEmbeddedResource("Decimal.Decimal_SystemTextJsonConverter"),
        LoadEmbeddedResource("Decimal.Decimal_TypeConverter"),
        DefaultEfValueConverter,
        LoadEmbeddedResource("Decimal.Decimal_DapperTypeHandler"),
        DefaultIComparable,
        LoadEmbeddedResource("Decimal.Decimal_SwaggerSchemaFilter"),
        LoadEmbeddedResource("Decimal.Decimal_Parsable")
    )
    {
        IsNumeric = true,
    };

    internal static readonly ResourceCollection StringResources = new(
        "string",
        AutoGeneratedHeader,
        LoadEmbeddedResource("String.String_Base"),
        LoadEmbeddedResource("String.String_NewtonsoftJsonConverter"),
        LoadEmbeddedResource("String.String_SystemTextJsonConverter"),
        LoadEmbeddedResource("String.String_TypeConverter"),
        DefaultEfValueConverter,
        LoadEmbeddedResource("String.String_DapperTypeHandler"),
        LoadEmbeddedResource("String.String_IComparable"),
        LoadEmbeddedResource("String.String_SwaggerSchemaFilter"),
        LoadEmbeddedResource("String.String_Parsable")
    )
    {
        Customizations =
        {
            [CtorKey] =
                "Value = value ?? throw new System.ArgumentNullException(nameof(value));",
        },
    };

    internal static readonly ResourceCollection NullableStringResources = new(
        "string?",
        AutoGeneratedHeader,
        LoadEmbeddedResource("String.String_Base"),
        LoadEmbeddedResource("NullableString.NullableString_NewtonsoftJsonConverter"),
        LoadEmbeddedResource("NullableString.NullableString_SystemTextJsonConverter"),
        LoadEmbeddedResource("NullableString.NullableString_TypeConverter"),
        LoadEmbeddedResource("NullableString.NullableString_EfValueConverter"),
        LoadEmbeddedResource("NullableString.NullableString_DapperTypeHandler"),
        LoadEmbeddedResource("String.String_IComparable"),
        LoadEmbeddedResource("NullableString.NullableString_SwaggerSchemaFilter"),
        LoadEmbeddedResource("NullableString.NullableString_Parsable")
    )
    {
        NullableEnable = true,
    };

    internal static readonly ResourceCollection NewIdResources = new(
        "MassTransit.NewId",
        AutoGeneratedHeader,
        LoadEmbeddedResource("NewId.NewId_Base"),
        LoadEmbeddedResource("NewId.NewId_NewtonsoftJsonConverter"),
        LoadEmbeddedResource("NewId.NewId_SystemTextJsonConverter"),
        LoadEmbeddedResource("NewId.NewId_TypeConverter"),
        LoadEmbeddedResource("NewId.NewId_EfValueConverter"),
        LoadEmbeddedResource("NewId.NewId_DapperTypeHandler"),
        DefaultIComparable,
        LoadEmbeddedResource("NewId.NewId_SwaggerSchemaFilter"),
        LoadEmbeddedResource("NewId.NewId_Parsable")
    );

    internal const string TypeConverterAttributeSource =
        "    [System.ComponentModel.TypeConverter(typeof(TYPENAMETypeConverter))]";

    internal const string NewtonsoftJsonAttributeSource =
        "    [Newtonsoft.Json.JsonConverter(typeof(TYPENAMENewtonsoftJsonConverter))]";

    internal const string SystemTextJsonAttributeSource =
        "    [System.Text.Json.Serialization.JsonConverter(typeof(TYPENAMESystemTextJsonConverter))]";

    internal const string SwaggerSchemaFilterAttributeSource =
        "    [Swashbuckle.AspNetCore.Annotations.SwaggerSchemaFilter(typeof(TYPENAMESchemaFilter))]";

    internal static string LoadEmbeddedResource(string resourceTemplateName)
    {
        var resourceName = $"{TemplateNamespace}{resourceTemplateName}.cs";
        var resourceStream = ThisAssembly.GetManifestResourceStream(resourceName);
        if (resourceStream is null)
        {
            var existingResources = ThisAssembly.GetManifestResourceNames();
            throw new ArgumentException(
                $"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
        }

        using var reader = new StreamReader(resourceStream, Encoding.UTF8);

        return reader.ReadToEnd();
    }

    public readonly record struct ResourceCollection(
        string InternalType,
        string Header,
        string Base,
        string Newtonsoft,
        string SystemTextJson,
        string TypeConverter,
        string EfValueConverter,
        string DapperTypeHandler,
        string Comparable,
        string SwaggerSchemaFilter,
        string Parsable
    )
    {
        public bool IsNumeric { get; init; } = false;
        public bool NullableEnable { get; init; } = false;

        public Dictionary<string, string> Customizations { get; init; } = new();

        // ReSharper disable once CollectionNeverUpdated.Global
        public Dictionary<string, string> TemplateVars { get; init; } = new();
    }

    internal static string LoadTemplateForEmitting(string resourceName)
    {
        var resource = LoadEmbeddedResource($"Sources.{resourceName}");
        return $@"{AutoGeneratedHeader}
#if STRONGLY_TYPED_EMBED_ATTRIBUTES

{resource
    .Replace("public sealed", "internal sealed")
    .Replace("public enum", "internal enum")}
#endif";
    }
}